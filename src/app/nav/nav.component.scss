@use '../../base';

$breakpoints: (
    'small': 600px,
    'medium': 900px,
    'large': 1200px) !default;

@mixin respond-to($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {

        // Prints a media query based on the value
        @media (min-width: map-get($breakpoints, $breakpoint)) {
            @content;
        }
    }

    // If the key doesn't exist in the map
    @else {
        @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        +"Available breakpoints are: #{map-keys($breakpoints)}.";
    }
}





#menuContainer {
    display: flex;
    justify-content: flex-end;
    align-items: flex-start;
    width: 100vw;
    position: fixed;
    transition: right 1s;
    z-index: 11;
    background-color: rgba(base.$primary-color, $alpha: 0.6);
    transition: top .3s;

    #hamburger, #close {
        font-size: 3rem;
        transition: all .3s;
        color: base.$secondary-color;
        padding: 16px;
        z-index: 2;
        position: relative;
        cursor: pointer;
        @include respond-to('small') {
            display: none;
        }
    }

    #close {
        display: none;
    }
    
    #menu {
        z-index: 10;
        height: 100%;
        display: none;
        flex-direction: column;
        @include respond-to('small') {
            display: flex;
            flex-direction: row;
        }
    
            a {
                list-style: none;
                padding: 2rem .5rem;
                @include respond-to('medium') {
                    padding: 2rem 3rem;
                }
                text-align: center;
                font-size: 1.5rem;
                text-transform: lowercase;
                cursor: pointer;
                color: base.$secondary-color;
                transition: all .3s;
                text-decoration: none;
            }
            
            a:hover {
                color: base.$primary-color;
                background-color: base.$secondary-color;
            }
    }
}
